# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YWXLRu1BoOfypB0Pan665xr-r5UuqQ0g
"""

my_dict= {'name':"akshay", 'age':24, 'subject': "python"}
print(my_dict)

#function --user defined function
#return keyword returns a value it does not print the value

def add(a,b):
  c=a + b
  return c
add(9,7)

# another example for function product of the numbers present in the list
def prod(lst):
  p=1
  for i in lst:
    p*=i
  return p
lst=[4,4,3]

prod(lst)

#Function can return multiple values in form of tuple
def calculator(a,b):
  sum=a+b
  sub=a-b
  mul=a*b
  div=a/b
  return sum,sub,mul,div
calculator(5,4)

#return can also evaluates the function, and can stores the values as tuples(), this is bcz only comma is imp in the case of tuple
def cal(a,b):
  return a+b,a-b,a*b,a/b   #it is evaluating the expression
cal(4,5)

# Scope of a variable refers to the portion of the program where the variable is recognized
#Global variable---recognized all over the program ----created outside of a function --can be used inside/ outside of a functio
#local variable --- recognized inside a function -- created inside a function  --can not used outside a function

age=24
print(age)

print(globals())

global_var=100

def test_func():
  local_var=50
  print(global_var)
  print(local_var)

test_func()
print(global_var)
##but cant print print local variable outside a function

x=45

def new_func():
  x=22
  print(x)

new_func()
print(x)

##if you want to change the global value of x used inside function then u
## should put global 
x=45

def new_func():
  global x  ##now both will print x=22
  x=22
  print(x)

new_func()
print(x)

#Lambda function -- anonymous function
# same as a funct see
def sum(a,b):
    return a+b
sum(4,5)    
# lambda syntax for this---   lambda a,b:a+b

sum =lambda a,b : a+b
sum(8,9)

(lambda x,y: x+y if x+y>0 else 0) (5,4)   # pass the value in same line if needed

func=(lambda x,y:x+y if x+y>0 else 0)  # u can also use a name to print the value
func(-600,7)

# lambda function generally used in a sort quick way
names=[('Sandhya',5),('Prateek',6),('Akshay',4)]
sorted(names)

sorted(names, key= lambda x: x[1])

sorted(names, key= lambda x: x[1], reverse=True)

# function to find lcm of two numbers
def lcm(a,b):
  
  max_num= (a if a>b else b)

  while True:
    if(max_num%a==0) and (max_num%b==0):
      return max_num
    else:
      max_num+=1
lcm(2,4)

## FUNCTION ARGUMENTS VS PARAMETERS
#actual values are ARGUMENTS and parameters are variables
def add(a,b):   #a b parameters
  return a+b
add(2,3)  #2 3 are arguments 

#positional arguments --mandatory to pass



#default arguments
#arbitrary arguments(args)
#keyword arguments (kwargs)

#positional arguments --they are required to pass in the same order

def intro(name,age):
  print("My name is", name)
  print("My age is", age)

intro("Akshay", 24)

#intro("Akshay") ##this will through an position arg error

#Default arguments-- some default values
# always comes after positional parameters
def intro(name,nationality='INDIAN'): #default
  print("My name is", name)
  print("My nationality is", nationality)

intro("Akshay")  # works without nationality

intro("Akshay","UP") # can be overridden

# Arbitrary arguments(*args)
# it can recieve any number of arguments and stores them in tuple
def args_func( *args):
  print(args)
  print(type(args))
  for i in args:
    print(i*2)
args_func(4,6,5,4,3,'Akshay', True)

#Keyword Arguments(**kwargs) --- stores in  dictionary
# it also recieve n number of arguments ands--- stores in the form of dictionary
# parameter name is mandatory while calling function

